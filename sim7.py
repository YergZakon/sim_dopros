import streamlit as st
import anthropic

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Anthropic —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–∞ Streamlit
client = anthropic.Anthropic(api_key=st.secrets["ANTHROPIC_API_KEY"])

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
questions = [
    "–ì–¥–µ –≤—ã –±—ã–ª–∏ –≤–µ—á–µ—Ä–æ–º 1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞?",
    "–í—ã –∑–Ω–∞–∫–æ–º—ã —Å –°–µ–π–¥–∞—Ö–º–µ—Ç–æ–≤—ã–º –ï.–°.?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–¥–∫–µ –¥–Ω—è 1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞.",
    "–í—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –±—ã–ª–∏ –≤ —Ä–∞–π–æ–Ω–µ —É–ª–∏—Ü—ã –°–∞—Ç–ø–∞–µ–≤–∞ –≤ –ñ–µ–∑–∫–∞–∑–≥–∞–Ω–µ?",
    "–ö–∞–∫–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?",
    "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å, –≥–¥–µ –≤—ã –æ–±—ã—á–Ω–æ –ø–∞—Ä–∫—É–µ—Ç–µ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
    "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?",
    "–£ –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã–µ, –≤–ª–∞–¥–µ—é—â–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º Lexus?",
    "–í—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å —Å –∫—Ä–∞–∂–∞–º–∏ –∏–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è–º–∏?",
    "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –¥–æ—Ä–æ–≥–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º?",
    "–ë—ã–ª–∞ –ª–∏ —É –≤–∞—Å –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –º–∞—à–∏–Ω–∞ –º–∞—Ä–∫–∏ Lexus?",
    "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ 2024 –≥–æ–¥–∞?",
    "–ö–∞–∫ –≤—ã –æ–±—ä—è—Å–Ω–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –≤–∞—à–∏—Ö –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ —Ä—É—á–∫–µ –¥–≤–µ—Ä–∏ Lexus?",
    "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç–º–æ–Ω–µ?",
    "–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?"
]

def generate_response(question, conversation_history):
    system_prompt = """–í—ã - –•—É—Å–Ω—É—Ç–¥–∏–Ω–æ–≤ –î–∞–Ω–∏—è—Ä –¢–∞–≥–∏—Ä–æ–≤–∏—á, –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –≤ –∫—Ä–∞–∂–µ –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è Lexus RX300 1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞ –≤ –ñ–µ–∑–∫–∞–∑–≥–∞–Ω–µ. –í—ã –≤–∏–Ω–æ–≤–Ω—ã, –Ω–æ –ø—ã—Ç–∞–µ—Ç–µ—Å—å —ç—Ç–æ —Å–∫—Ä—ã—Ç—å. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–ª–æ–Ω—á–∏–≤—ã–º–∏, –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –∏–ª–∏ –¥–∞–∂–µ –ª–æ–∂–Ω—ã–º–∏, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ. –í—ã –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—Ç–µ –≤–æ –≤—Ä–µ–º—è –¥–æ–ø—Ä–æ—Å–∞, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ –≤–∞—à–µ–π —Ä–µ—á–∏. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä—è–º–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–∞—Å–∞—é—â–∏–µ—Å—è Lexus –∏–ª–∏ –∫—Ä–∞–∂–∏. –í–∞—à–∞ —Ü–µ–ª—å - –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –≤–∏–Ω—ã."""

    messages = conversation_history + [
        {"role": "human", "content": f"–í–æ–ø—Ä–æ—Å —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è: {question}"}
    ]

    response = client.messages.create(
        model="claude-3-sonnet-20240229",
        max_tokens=150,
        system=system_prompt,
        messages=messages
    )
    return response.content[0].text

def evaluate_response(question, response):
    suspicious_keywords = ['lexus', '–∫—Ä–∞–∂–∞', '—É–≥–æ–Ω', '–¥–µ–Ω—å–≥–∏', '–ø–æ—Ä—Ç–º–æ–Ω–µ', '–æ—Ç–ø–µ—á–∞—Ç–∫–∏', '—É–ª–∏—Ü–∞ —Å–∞—Ç–ø–∞–µ–≤–∞']
    evasive_phrases = ['–Ω–µ –ø–æ–º–Ω—é', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é']
    
    lower_response = response.lower()
    suspicion_score = sum(keyword in lower_response for keyword in suspicious_keywords)
    evasiveness_score = sum(phrase in lower_response for phrase in evasive_phrases)
    
    total_score = suspicion_score + evasiveness_score
    rating = min(max(total_score, 1), 5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5
    
    explanation = f"–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {suspicion_score} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ {evasiveness_score} —É–∫–ª–æ–Ω—á–∏–≤—ã—Ö —Ñ—Ä–∞–∑."
    if rating <= 2:
        explanation += " –û—Ç–≤–µ—Ç –∫–∞–∂–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä—è–º—ã–º –∏ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏—Ö –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π."
    elif rating <= 4:
        explanation += " –û—Ç–≤–µ—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –∫–∞–∂–µ—Ç—Å—è —É–∫–ª–æ–Ω—á–∏–≤—ã–º."
    else:
        explanation += " –û—Ç–≤–µ—Ç –∫—Ä–∞–π–Ω–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–µ–Ω –∏ —É–∫–ª–æ–Ω—á–∏–≤."
    
    return rating, explanation

def main():
    st.set_page_config(page_title="–°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ø—Ä–æ—Å–∞", page_icon="üïµÔ∏è")
    st.title("–°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ø—Ä–æ—Å–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ")

    if 'conversation_history' not in st.session_state:
        st.session_state.conversation_history = []
    if 'asked_questions' not in st.session_state:
        st.session_state.asked_questions = []
    if 'score' not in st.session_state:
        st.session_state.score = 0
    if 'responses' not in st.session_state:
        st.session_state.responses = []

    available_questions = [q for q in questions if q not in st.session_state.asked_questions]
    
    if available_questions:
        selected_question = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞:", available_questions)
        
        if st.button("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
            with st.spinner("–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç..."):
                response = generate_response(selected_question, st.session_state.conversation_history)
                st.session_state.conversation_history.append({"role": "human", "content": f"–í–æ–ø—Ä–æ—Å —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è: {selected_question}"})
                st.session_state.conversation_history.append({"role": "assistant", "content": response})
                
                rating, explanation = evaluate_response(selected_question, response)
            
            st.session_state.responses.append({
                "question": selected_question,
                "answer": response,
                "rating": rating,
                "explanation": explanation
            })
            
            st.session_state.asked_questions.append(selected_question)
            st.session_state.score += rating

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–ø—Ä–æ—Å–∞
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ø—Ä–æ—Å–∞")
    for item in st.session_state.responses:
        st.write(f"**–í–æ–ø—Ä–æ—Å:** {item['question']}")
        st.write(f"**–û—Ç–≤–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ:** {item['answer']}")
        st.write(f"**–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:** {item['rating']}/5")
        st.write(f"**–ê–Ω–∞–ª–∏–∑:** {item['explanation']}")
        st.write("---")

    if not available_questions:
        st.success("–î–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã.")
    
    st.sidebar.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ø—Ä–æ—Å–µ")
    st.sidebar.write(f"–ó–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(st.session_state.asked_questions)}")
    st.sidebar.write(f"–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {st.session_state.score}")
    
    st.sidebar.title("–ó–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    for q in st.session_state.asked_questions:
        st.sidebar.write(q)

if __name__ == "__main__":
    main()
